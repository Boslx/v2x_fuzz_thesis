{
  "Date": "2024-05-14T13:43:05.313285+02:00",
  "Uname": "Linux b6a0677e0bcc 5.15.0-94-generic #104-Ubuntu SMP Tue Jan 9 15:25:40 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux",
  "OS": "Ubuntu",
  "OSRelease": "22.04",
  "Architecture": "amd64",
  "ExecutablePath": "./routerIndicatePersistentFuzz_asan",
  "ProcCmdline": "./routerIndicatePersistentFuzz_asan",
  "Stdin": "/usr/src/project/routerIndicate/output/fuzzerASAN/crashes/id:000013,sig:06,src:000429,time:113488,execs:322766,op:ext_AO,pos:51",
  "ProcStatus": [],
  "ProcMaps": [],
  "ProcFiles": [],
  "NetworkConnections": [],
  "CrashSeverity": {
    "Type": "NOT_EXPLOITABLE",
    "ShortDescription": "allocation-size-too-big",
    "Description": "Allocation size too big",
    "Explanation": "Requested allocation size exceeds maximum supported size."
  },
  "Stacktrace": [
    "    #0 0x5555556ac2e7 in operator new(unsigned long) (/usr/src/project/routerIndicate/routerIndicatePersistentFuzz_asan+0x1582e7)",
    "    #1 0x555555b5a52d in __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) /usr/include/c++/11/ext/new_allocator.h:127",
    "    #2 0x555555b5a52d in std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) /usr/include/c++/11/bits/alloc_traits.h:464",
    "    #3 0x555555b5a52d in std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) /usr/include/c++/11/bits/stl_vector.h:346",
    "    #4 0x555555b5a52d in std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_create_storage(unsigned long) /usr/include/c++/11/bits/stl_vector.h:361",
    "    #5 0x555555b5a52d in std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_base(unsigned long, std::allocator<unsigned char> const&) /usr/include/c++/11/bits/stl_vector.h:305",
    "    #6 0x555555b5a52d in std::vector<unsigned char, std::allocator<unsigned char> >::vector(unsigned long, std::allocator<unsigned char> const&) /usr/include/c++/11/bits/stl_vector.h:511",
    "    #7 0x555555b5a52d in vanetza::security::v2::deserialize(vanetza::InputArchive&, vanetza::security::v2::RecipientInfo&, vanetza::security::v2::SymmetricAlgorithm const&) /home/boslx/CLionProjects/vanetzaFuzz/vanetza/security/v2/recipient_info.cpp:129",
    "    #8 0x7fffffffa70f  ([stack]+0x1c70f)",
    "    #9 0x555555b4a83e in unsigned long vanetza::security::v2::deserialize<vanetza::security::v2::RecipientInfo, vanetza::security::v2::SymmetricAlgorithm&>(vanetza::InputArchive&, std::__cxx11::list<vanetza::security::v2::RecipientInfo, std::allocator<vanetza::security::v2::RecipientInfo> >&, vanetza::security::v2::SymmetricAlgorithm&) /home/boslx/CLionProjects/vanetzaFuzz/vanetza/security/v2/serialization.hpp:98"
  ],
  "Registers": {},
  "Disassembly": [],
  "Package": "",
  "PackageVersion": "",
  "PackageArchitecture": "",
  "PackageDescription": "",
  "AsanReport": [
    "==1841191==ERROR: AddressSanitizer: requested allocation size 0x17f00003fa014 (0x17f00003fb018 after adjustments for alignment, red zones etc.) exceeds maximum supported size of 0x10000000000 (thread T0)",
    "    #0 0x5555556ac2e7 in operator new(unsigned long) (/usr/src/project/routerIndicate/routerIndicatePersistentFuzz_asan+0x1582e7)",
    "    #1 0x555555b5a52d in __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) /usr/include/c++/11/ext/new_allocator.h:127",
    "    #2 0x555555b5a52d in std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) /usr/include/c++/11/bits/alloc_traits.h:464",
    "    #3 0x555555b5a52d in std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) /usr/include/c++/11/bits/stl_vector.h:346",
    "    #4 0x555555b5a52d in std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_create_storage(unsigned long) /usr/include/c++/11/bits/stl_vector.h:361",
    "    #5 0x555555b5a52d in std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_base(unsigned long, std::allocator<unsigned char> const&) /usr/include/c++/11/bits/stl_vector.h:305",
    "    #6 0x555555b5a52d in std::vector<unsigned char, std::allocator<unsigned char> >::vector(unsigned long, std::allocator<unsigned char> const&) /usr/include/c++/11/bits/stl_vector.h:511",
    "    #7 0x555555b5a52d in vanetza::security::v2::deserialize(vanetza::InputArchive&, vanetza::security::v2::RecipientInfo&, vanetza::security::v2::SymmetricAlgorithm const&) /home/boslx/CLionProjects/vanetzaFuzz/vanetza/security/v2/recipient_info.cpp:129",
    "    #8 0x7fffffffa70f  ([stack]+0x1c70f)",
    "    #9 0x555555b4a83e in unsigned long vanetza::security::v2::deserialize<vanetza::security::v2::RecipientInfo, vanetza::security::v2::SymmetricAlgorithm&>(vanetza::InputArchive&, std::__cxx11::list<vanetza::security::v2::RecipientInfo, std::allocator<vanetza::security::v2::RecipientInfo> >&, vanetza::security::v2::SymmetricAlgorithm&) /home/boslx/CLionProjects/vanetzaFuzz/vanetza/security/v2/serialization.hpp:98",
    "",
    "==1841191==HINT: if you don't care about these errors you may set allocator_may_return_null=1",
    "SUMMARY: AddressSanitizer: allocation-size-too-big (/usr/src/project/routerIndicate/routerIndicatePersistentFuzz_asan+0x1582e7) in operator new(unsigned long)",
    "==1841191==ABORTING"
  ],
  "UbsanReport": [],
  "PythonReport": [],
  "GoReport": [],
  "JavaReport": [],
  "RustReport": [],
  "JsReport": [],
  "CSharpReport": [],
  "CrashLine": "/home/boslx/CLionProjects/vanetzaFuzz/vanetza/security/v2/recipient_info.cpp:129",
  "Source": []
}